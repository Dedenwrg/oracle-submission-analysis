---
title: Issue 8
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.4
  kernelspec:
    name: devenv
    language: python
    display_name: Python (devenv)
---

## 8. Weekend / Market Closure Effects

This notebook documents the analysis for **Issue #8: Weekend / Market Closure Effects** in the Autonity Oracle data. It covers:

- **What is this issue about?**  
- **Why conduct this issue analysis?**  
- **How to conduct this issue analysis?**  
- **What are the results?**  

---

### 8.1 What Is This Issue About?

In traditional FX markets, trading usually pauses during weekends, leading to flat or absent quotes. Some Oracle validators might incorrectly update FX prices on weekends, resulting in:

- **Flat or missing FX data** on weekends.
- **Unexpected updates** from some validators, possibly due to synthetic or misconfigured data feeds.

---

### 8.2 Why Conduct This Issue Analysis?

- To ensure the Oracle accurately reflects real FX market behavior.
- To identify if validators consistently handle weekends incorrectly.
- To inform policy decisions about weekend data handling.

---

### 8.3 How to Conduct the Analysis?

Use Python with the **Polars** library (`v1.24.0`) to:

1. Load and preprocess Oracle submission CSV files.
2. Aggregate submission counts by day, distinguishing weekends (Saturday=5, Sunday=6) from weekdays.
3. Compare Oracle weekend submissions to minute-level FX data from Yahoo Finance to see if validators' behaviors align with real market data.

Below is the script performing this analysis:

```{python}
import polars as pl
import glob
import warnings

warnings.filterwarnings("ignore")
```

```{python}
def load_and_preprocess_submissions(submission_glob: str) -> pl.DataFrame:
    """
    Loads Oracle Submission CSVs and returns a Polars DataFrame.
    """
    files = sorted(glob.glob(submission_glob))
    if not files:
        raise ValueError(f"No files match {submission_glob}")
    
    lf = pl.concat(
        [pl.scan_csv(f, dtypes={"Timestamp": pl.Utf8}, null_values=[""], ignore_errors=True) for f in files]
    ).with_columns(
        pl.col("Timestamp").str.strptime(pl.Datetime, strict=False).alias("Timestamp_dt")
    ).with_columns([
        pl.col("Timestamp_dt").cast(pl.Date).alias("date_only"),
        pl.col("Timestamp_dt").dt.weekday().alias("weekday_num")
    ])

    return lf.collect()

def load_yahoo_finance_data(directory_pattern: str, pair_label: str) -> pl.DataFrame:
    """
    Loads Yahoo Finance CSVs and returns a Polars DataFrame.
    """
    files = sorted(glob.glob(directory_pattern))
    if not files:
        raise ValueError(f"No Yahoo CSVs found: {directory_pattern}")

    lf = pl.concat(
        [pl.scan_csv(f, has_header=False, skip_rows=3,
                     new_columns=["Datetime","Close","High","Low","Open","Volume"],
                     try_parse_dates=True) for f in files]
    ).sort("Datetime").select([
        pl.col("Datetime").alias("timestamp_benchmark"),
        pl.col("Close").alias("benchmark_close")
    ])

    return lf.collect().with_columns(pl.lit(pair_label).alias("symbol"))

def load_all_fx_benchmarks() -> dict[str, pl.DataFrame]:
    """
    Loads FX data from Yahoo Finance.
    """
    patterns = {
        "AUD-USD": "../yahoo-finance/data/AUDUSD/AUDUSD=X_1m_*.csv",
        "CAD-USD": "../yahoo-finance/data/CADUSD/CADUSD=X_1m_*.csv",
        "EUR-USD": "../yahoo-finance/data/EURUSD/EURUSD=X_1m_*.csv",
        "GBP-USD": "../yahoo-finance/data/GBPUSD/GBPUSD=X_1m_*.csv",
        "JPY-USD": "../yahoo-finance/data/JPYUSD/JPYUSD=X_1m_*.csv",
        "SEK-USD": "../yahoo-finance/data/SEKUSD/SEKUSD=X_1m_*.csv",
    }
    return {pair: load_yahoo_finance_data(pattern, pair) for pair, pattern in patterns.items()}

def analyze_weekend_market_closure_issues(
    submission_glob: str,
    fx_pairs: list[str],
    yahoo_data_dict: dict[str, pl.DataFrame],
):
    """
    Main analysis function.
    """
    df_sub = load_and_preprocess_submissions(submission_glob)

    fx_cols = [c for c in fx_pairs if c in df_sub.columns]
    df_sub = df_sub.with_columns(
        pl.fold(False, lambda acc, x: acc | x, [pl.col(c).is_not_null() for c in fx_cols]).alias("any_fx_submitted")
    )

    df_agg_day = df_sub.group_by(["date_only","weekday_num"]).agg([
        pl.col("any_fx_submitted").sum().alias("num_submissions"),
        pl.col("any_fx_submitted").sum().alias("num_fx_submissions")
    ]).sort("date_only")

    yahoo_weekend_info = {}
    for pair, df_yahoo in yahoo_data_dict.items():
        df_y = df_yahoo.with_columns([
            pl.col("timestamp_benchmark").cast(pl.Date).alias("date_only"),
            pl.col("timestamp_benchmark").dt.weekday().alias("weekday_num")
        ]).group_by(["date_only","weekday_num"]).agg([
            pl.count("benchmark_close").alias("count_quotes"),
            (pl.col("benchmark_close").max() - pl.col("benchmark_close").min()).alias("range_close")
        ])
        yahoo_weekend_info[pair] = df_y

    weekend_rows = df_agg_day.filter(pl.col("weekday_num") >= 5)
    weekday_rows = df_agg_day.filter(pl.col("weekday_num") < 5)

    results = {
        "df_submissions_raw": df_sub,
        "df_submissions_day_agg": df_agg_day,
        "weekend_total_submissions": weekend_rows["num_submissions"].sum(),
        "weekday_total_submissions": weekday_rows["num_submissions"].sum(),
        "yahoo_weekend_info": yahoo_weekend_info
    }

    return results
```

```{python}
fx_cols = [
    "AUD-USD Price","CAD-USD Price","EUR-USD Price",
    "GBP-USD Price","JPY-USD Price","SEK-USD Price"
]

yahoo_data = load_all_fx_benchmarks()

results = analyze_weekend_market_closure_issues(
    "../submission-data/Oracle_Submission_*.csv",
    fx_cols,
    yahoo_data
)
```

---

### 8.4 What are the results?

Below are the results, interpretation and key insights from the analysis.

**Daily Submission Patterns (Weekend vs. Weekday)**

```{python}
df_daily = results["df_submissions_day_agg"]
df_daily
```

```{python}
weekend_total = results["weekend_total_submissions"]
weekday_total = results["weekday_total_submissions"]

print(f"Total weekend submissions: {weekend_total}")
print(f"Total weekday submissions: {weekday_total}")

weekend_pct = (weekend_total / (weekend_total + weekday_total)) * 100
print(f"Weekend submissions as % of total: {weekend_pct:.1f}%")

if weekend_pct < 10:
    print("Very low weekend submissions suggest validators typically avoid weekend updates, aligning with expected FX market behavior.")
elif weekend_pct < 30:
    print("Moderate weekend activity suggests possible mixed validator behavior or synthetic weekend feeds.")
else:
    print("High weekend submissions indicate unexpected validator behavior or synthetic FX data.")
```

Yahoo Finance Weekend Patterns (FX benchmarks)

```{python}
yahoo_info = results["yahoo_weekend_info"]
for pair, df_y in yahoo_info.items():
    print(f"\nFX Pair: {pair}")
    display(df_y)
    weekend_quotes = df_y.filter(pl.col("weekday_num") >= 5)["count_quotes"].sum()
    print(f"Total weekend Yahoo quotes: {weekend_quotes}")

    if weekend_quotes == 0:
        print(f"Yahoo data confirms no weekend activity for {pair}.")
    else:
        print(f"Yahoo data shows unexpected weekend activity for {pair}.")
```

**List of all Validators and their Weekend Submission Ratios**

```{python}
df_sub_raw = results["df_submissions_raw"]

df_validator_weekend = (
    df_sub_raw
    .with_columns(
        (pl.col("weekday_num") >= 5).cast(pl.Int8).alias("is_weekend")
    )
    .group_by("Validator Address")
    .agg([
        pl.count().alias("total_submissions"),
        pl.col("is_weekend").sum().alias("weekend_submissions")
    ])
    .with_columns(
        (pl.col("weekend_submissions") / pl.col("total_submissions"))
        .alias("weekend_submission_ratio")
    )
    .sort("weekend_submission_ratio", descending=True)
)

for row in df_validator_weekend.to_dicts():
    print(
        f"Validator {row['Validator Address']}: "
        f"total_submissions={row['total_submissions']}, "
        f"weekend_submissions={row['weekend_submissions']}, "
        f"weekend_submission_ratio={row['weekend_submission_ratio']:.2f}"
    )
```

Please note, `total_submissions` represents the total number of individual price-update rows this validator sent during the study period. `weekend_submissions` is how many of those rows were posted on Saturdays or Sundays. `weekend_submission_ratio` is the proportion of weekend submissions (0 â€“ 1 scale); higher values indicate the validator updates more frequently on weekends relative to weekdays.